/* automatically generated by rust-bindgen */

pub const MULTIBOOT_HEADER: u32 = 1;
pub const MULTIBOOT_SEARCH: u32 = 8192;
pub const MULTIBOOT_HEADER_ALIGN: u32 = 4;
pub const MULTIBOOT_HEADER_MAGIC: u32 = 464367618;
pub const MULTIBOOT_BOOTLOADER_MAGIC: u32 = 732803074;
pub const MULTIBOOT_MOD_ALIGN: u32 = 4096;
pub const MULTIBOOT_INFO_ALIGN: u32 = 4;
pub const MULTIBOOT_PAGE_ALIGN: u32 = 1;
pub const MULTIBOOT_MEMORY_INFO: u32 = 2;
pub const MULTIBOOT_VIDEO_MODE: u32 = 4;
pub const MULTIBOOT_AOUT_KLUDGE: u32 = 65536;
pub const MULTIBOOT_INFO_MEMORY: u32 = 1;
pub const MULTIBOOT_INFO_BOOTDEV: u32 = 2;
pub const MULTIBOOT_INFO_CMDLINE: u32 = 4;
pub const MULTIBOOT_INFO_MODS: u32 = 8;
pub const MULTIBOOT_INFO_AOUT_SYMS: u32 = 16;
pub const MULTIBOOT_INFO_ELF_SHDR: u32 = 32;
pub const MULTIBOOT_INFO_MEM_MAP: u32 = 64;
pub const MULTIBOOT_INFO_DRIVE_INFO: u32 = 128;
pub const MULTIBOOT_INFO_CONFIG_TABLE: u32 = 256;
pub const MULTIBOOT_INFO_BOOT_LOADER_NAME: u32 = 512;
pub const MULTIBOOT_INFO_APM_TABLE: u32 = 1024;
pub const MULTIBOOT_INFO_VBE_INFO: u32 = 2048;
pub const MULTIBOOT_INFO_FRAMEBUFFER_INFO: u32 = 4096;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED: u32 = 0;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_RGB: u32 = 1;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT: u32 = 2;
pub const MULTIBOOT_MEMORY_AVAILABLE: u32 = 1;
pub const MULTIBOOT_MEMORY_RESERVED: u32 = 2;
pub const MULTIBOOT_MEMORY_ACPI_RECLAIMABLE: u32 = 3;
pub const MULTIBOOT_MEMORY_NVS: u32 = 4;
pub const MULTIBOOT_MEMORY_BADRAM: u32 = 5;
pub type multiboot_uint8_t = crate::multiboot::ctypes::c_uchar;
pub type multiboot_uint16_t = crate::multiboot::ctypes::c_ushort;
pub type multiboot_uint32_t = crate::multiboot::ctypes::c_uint;
pub type multiboot_uint64_t = crate::multiboot::ctypes::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_header {
    pub magic: multiboot_uint32_t,
    pub flags: multiboot_uint32_t,
    pub checksum: multiboot_uint32_t,
    pub header_addr: multiboot_uint32_t,
    pub load_addr: multiboot_uint32_t,
    pub load_end_addr: multiboot_uint32_t,
    pub bss_end_addr: multiboot_uint32_t,
    pub entry_addr: multiboot_uint32_t,
    pub mode_type: multiboot_uint32_t,
    pub width: multiboot_uint32_t,
    pub height: multiboot_uint32_t,
    pub depth: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_header() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_header>(),
        48usize,
        concat!("Size of: ", stringify!(multiboot_header))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_header>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_header))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).checksum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).header_addr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(header_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).load_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(load_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).load_end_addr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(load_end_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).bss_end_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(bss_end_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).entry_addr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(entry_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).mode_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(mode_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).width as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).height as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_header>())).depth as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_header),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_aout_symbol_table {
    pub tabsize: multiboot_uint32_t,
    pub strsize: multiboot_uint32_t,
    pub addr: multiboot_uint32_t,
    pub reserved: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_aout_symbol_table() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_aout_symbol_table>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_aout_symbol_table))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_aout_symbol_table>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_aout_symbol_table))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_aout_symbol_table>())).tabsize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_aout_symbol_table),
            "::",
            stringify!(tabsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_aout_symbol_table>())).strsize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_aout_symbol_table),
            "::",
            stringify!(strsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_aout_symbol_table>())).addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_aout_symbol_table),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_aout_symbol_table>())).reserved as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_aout_symbol_table),
            "::",
            stringify!(reserved)
        )
    );
}
pub type multiboot_aout_symbol_table_t = multiboot_aout_symbol_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_elf_section_header_table {
    pub num: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub addr: multiboot_uint32_t,
    pub shndx: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_elf_section_header_table() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_elf_section_header_table>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_elf_section_header_table))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_elf_section_header_table>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_elf_section_header_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_elf_section_header_table>())).num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_elf_section_header_table),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_elf_section_header_table>())).size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_elf_section_header_table),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_elf_section_header_table>())).addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_elf_section_header_table),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_elf_section_header_table>())).shndx as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_elf_section_header_table),
            "::",
            stringify!(shndx)
        )
    );
}
pub type multiboot_elf_section_header_table_t = multiboot_elf_section_header_table;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct multiboot_info {
    pub flags: multiboot_uint32_t,
    pub mem_lower: multiboot_uint32_t,
    pub mem_upper: multiboot_uint32_t,
    pub boot_device: multiboot_uint32_t,
    pub cmdline: multiboot_uint32_t,
    pub mods_count: multiboot_uint32_t,
    pub mods_addr: multiboot_uint32_t,
    pub u: multiboot_info__bindgen_ty_1,
    pub mmap_length: multiboot_uint32_t,
    pub mmap_addr: multiboot_uint32_t,
    pub drives_length: multiboot_uint32_t,
    pub drives_addr: multiboot_uint32_t,
    pub config_table: multiboot_uint32_t,
    pub boot_loader_name: multiboot_uint32_t,
    pub apm_table: multiboot_uint32_t,
    pub vbe_control_info: multiboot_uint32_t,
    pub vbe_mode_info: multiboot_uint32_t,
    pub vbe_mode: multiboot_uint16_t,
    pub vbe_interface_seg: multiboot_uint16_t,
    pub vbe_interface_off: multiboot_uint16_t,
    pub vbe_interface_len: multiboot_uint16_t,
    pub framebuffer_addr: multiboot_uint64_t,
    pub framebuffer_pitch: multiboot_uint32_t,
    pub framebuffer_width: multiboot_uint32_t,
    pub framebuffer_height: multiboot_uint32_t,
    pub framebuffer_bpp: multiboot_uint8_t,
    pub framebuffer_type: multiboot_uint8_t,
    pub __bindgen_anon_1: multiboot_info__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union multiboot_info__bindgen_ty_1 {
    pub aout_sym: multiboot_aout_symbol_table_t,
    pub elf_sec: multiboot_elf_section_header_table_t,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_multiboot_info__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_info__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_info__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_info__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_1>())).aout_sym as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_1),
            "::",
            stringify!(aout_sym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_1>())).elf_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_1),
            "::",
            stringify!(elf_sec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union multiboot_info__bindgen_ty_2 {
    pub __bindgen_anon_1: multiboot_info__bindgen_ty_2__bindgen_ty_1,
    pub __bindgen_anon_2: multiboot_info__bindgen_ty_2__bindgen_ty_2,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_info__bindgen_ty_2__bindgen_ty_1 {
    pub framebuffer_palette_addr: multiboot_uint32_t,
    pub framebuffer_palette_num_colors: multiboot_uint16_t,
}
#[test]
fn bindgen_test_layout_multiboot_info__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_info__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_info__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_1>()))
                .framebuffer_palette_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(framebuffer_palette_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_1>()))
                .framebuffer_palette_num_colors as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(framebuffer_palette_num_colors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_info__bindgen_ty_2__bindgen_ty_2 {
    pub framebuffer_red_field_position: multiboot_uint8_t,
    pub framebuffer_red_mask_size: multiboot_uint8_t,
    pub framebuffer_green_field_position: multiboot_uint8_t,
    pub framebuffer_green_mask_size: multiboot_uint8_t,
    pub framebuffer_blue_field_position: multiboot_uint8_t,
    pub framebuffer_blue_mask_size: multiboot_uint8_t,
}
#[test]
fn bindgen_test_layout_multiboot_info__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_info__bindgen_ty_2__bindgen_ty_2>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_info__bindgen_ty_2__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_red_field_position as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_red_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_red_mask_size as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_red_mask_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_green_field_position as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_green_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_green_mask_size as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_green_mask_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_blue_field_position as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_blue_field_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info__bindgen_ty_2__bindgen_ty_2>()))
                .framebuffer_blue_mask_size as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(framebuffer_blue_mask_size)
        )
    );
}
#[test]
fn bindgen_test_layout_multiboot_info__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_info__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(multiboot_info__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_info__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_info__bindgen_ty_2))
    );
}
#[test]
fn bindgen_test_layout_multiboot_info() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_info>(),
        120usize,
        concat!("Size of: ", stringify!(multiboot_info))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_info>(),
        8usize,
        concat!("Alignment of ", stringify!(multiboot_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mem_lower as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mem_lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mem_upper as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mem_upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).boot_device as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(boot_device)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).cmdline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(cmdline)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mods_count as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mods_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mods_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mods_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).u as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mmap_length as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mmap_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).mmap_addr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(mmap_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).drives_length as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(drives_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).drives_addr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(drives_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).config_table as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(config_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).boot_loader_name as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(boot_loader_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).apm_table as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(apm_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).vbe_control_info as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_control_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).vbe_mode_info as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_mode_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).vbe_mode as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).vbe_interface_seg as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_interface_seg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).vbe_interface_off as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_interface_off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).vbe_interface_len as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(vbe_interface_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).framebuffer_addr as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).framebuffer_pitch as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).framebuffer_width as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).framebuffer_height as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_info>())).framebuffer_bpp as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_bpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<multiboot_info>())).framebuffer_type as *const _ as usize
        },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_info),
            "::",
            stringify!(framebuffer_type)
        )
    );
}
pub type multiboot_info_t = multiboot_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_color {
    pub red: multiboot_uint8_t,
    pub green: multiboot_uint8_t,
    pub blue: multiboot_uint8_t,
}
#[test]
fn bindgen_test_layout_multiboot_color() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_color>(),
        3usize,
        concat!("Size of: ", stringify!(multiboot_color))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_color>(),
        1usize,
        concat!("Alignment of ", stringify!(multiboot_color))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_color>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_color>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_color>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_color),
            "::",
            stringify!(blue)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_mmap_entry {
    pub size: multiboot_uint32_t,
    pub addr: multiboot_uint64_t,
    pub len: multiboot_uint64_t,
    pub type_: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_mmap_entry() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_mmap_entry>(),
        24usize,
        concat!("Size of: ", stringify!(multiboot_mmap_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_mmap_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(multiboot_mmap_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mmap_entry>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mmap_entry>())).addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mmap_entry>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mmap_entry>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mmap_entry),
            "::",
            stringify!(type_)
        )
    );
}
pub type multiboot_memory_map_t = multiboot_mmap_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_mod_list {
    pub mod_start: multiboot_uint32_t,
    pub mod_end: multiboot_uint32_t,
    pub cmdline: multiboot_uint32_t,
    pub pad: multiboot_uint32_t,
}
#[test]
fn bindgen_test_layout_multiboot_mod_list() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_mod_list>(),
        16usize,
        concat!("Size of: ", stringify!(multiboot_mod_list))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_mod_list>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_mod_list))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mod_list>())).mod_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mod_list),
            "::",
            stringify!(mod_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mod_list>())).mod_end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mod_list),
            "::",
            stringify!(mod_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mod_list>())).cmdline as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mod_list),
            "::",
            stringify!(cmdline)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_mod_list>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_mod_list),
            "::",
            stringify!(pad)
        )
    );
}
pub type multiboot_module_t = multiboot_mod_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_apm_info {
    pub version: multiboot_uint16_t,
    pub cseg: multiboot_uint16_t,
    pub offset: multiboot_uint32_t,
    pub cseg_16: multiboot_uint16_t,
    pub dseg: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub cseg_len: multiboot_uint16_t,
    pub cseg_16_len: multiboot_uint16_t,
    pub dseg_len: multiboot_uint16_t,
}
#[test]
fn bindgen_test_layout_multiboot_apm_info() {
    assert_eq!(
        ::core::mem::size_of::<multiboot_apm_info>(),
        20usize,
        concat!("Size of: ", stringify!(multiboot_apm_info))
    );
    assert_eq!(
        ::core::mem::align_of::<multiboot_apm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(multiboot_apm_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).cseg as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(cseg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).cseg_16 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(cseg_16)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).dseg as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(dseg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).cseg_len as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(cseg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).cseg_16_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(cseg_16_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<multiboot_apm_info>())).dseg_len as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(multiboot_apm_info),
            "::",
            stringify!(dseg_len)
        )
    );
}
